<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:lang="http://www.springframework.org/schema/lang"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
 http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
 http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
 http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
 http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang.xsd
 http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
 http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">
 
 <!--  -->
	<context:annotation-config />
	<context:component-scan base-package="com.yiyo.contact" />              <!--  -->
	<!-- donde se encuentra la vista de nuestro modelos MVC  -->
	<bean id="jspViewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">   
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>                                                                                     <!--  -->
	<!-- aca es donde el boludo este uso el raro archivo messages_es.properties -->
	<bean id="messageSource"                                                                                                                             
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basename" value="classpath:messages" />
		<property name="defaultEncoding" value="UTF-8" />
	</bean>
	<!-- aquí le indicamos que tenemos un archivo con propiedades jdbc.properties -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"
		p:location="/WEB-INF/jdbc.properties" />

<!--  en este caso indica los datos de acceso para conectarse a la BD, ya que la base de datos será nuestra “fuente de datos” -->
	<bean id="dataSource" 
	      class="org.apache.commons.dbcp.BasicDataSource"
		  destroy-method="close"
		  p:driverClassName="${jdbc.driverClassName}"
		  p:url="${jdbc.databaseurl}"
		  p:username="${jdbc.username}" 
		  p:password="${jdbc.password}" />
         
         
     <!--Aquí le “decimos” a Spring MVC que vamos a utilizar Hibernate y le decimos donde tiene que leer el archivo de “mapeo” (hibernate.cfg.xml)  -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />            <!--  -->
		
		<property name="configLocation">
			<value>classpath:hibernate.cfg.xml</value>
		</property>
		
		<property name="configurationClass">                              <!--  -->
			<value>org.hibernate.cfg.AnnotationConfiguration</value>
		</property>
		
		<property name="hibernateProperties">                                                 <!--  -->
			<props>
				<prop key="hibernate.dialect">${jdbc.dialect}</prop>
				<prop key="hibernate.show_sql">true</prop>
			</props>
		</property>
	</bean>
	
	<!--  -->
	<tx:annotation-driven />
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

</beans>